#!/opt/ansible-dk/embedded/bin/python
#
# TODO: this code is very *nix centric.  Ensure that this works with Windows systems

import click
import os
import sys
import json

###################################################
# Defaults
RUBY_ABI = "2.1.0"
PYTHON_ABI = "2.7"
HOME = os.getenv("HOME")

# pull version from version-manifest file left by package install
def check_version():
    file='/opt/ansible-dk/version-manifest.json'
    try:
        version = json.loads(open(file).read())['build_version']
    except ValueError as e:
        print "%s in %s" % (e, file)
        sys.exit(-1)
    except KeyError as e:
        print "Could not find %s in %s" % (e, file)
        sys.exit(-1)
    except (IOError, OSError) as e:
        message = "Error checking version: %s" % e.strerror
        if type(e.filename) == str:
            message += " %s" % e.filename
        print(message)
        sys.exit(e.errno)
    return version

###################################################
# Generic top-level group definition
@click.group()
@click.version_option(version=check_version())
def cli():
    pass

###################################################
# shell-init command
@cli.command(name='shell-init')
@click.option('--debug', is_flag=True, help="Enable debug mode")
@click.argument('shell', default='bash')
# TODO: Currently shell argument doesn't actually do anything.  Implement other shells, zsh anyone?
def shell_init(shell, debug=False):
    if debug:
        print("[DEBUG] Home directory = %s" % HOME)

    directories = [
        HOME+"/.ansible-dk",
        HOME+"/.ansible-dk/gem",
        HOME+"/.ansible-dk/python"
    ]

    for directory in directories:
        try:
            if debug:
                print("[DEBUG] Creating directory: %s" % directory)
            os.mkdir(directory)
        except OSError as e:
            if e.errno == 17: # if file exists
                if debug:
                    print("[DEBUG] %s - skipping - %s" % (e.strerror, e.filename))
                pass
            else:
                print("Error creating %s - %s(%d)" % (e.filename, e.strerror, e.errno))
                sys.exit(e.errno)

    # Print out environment variables for the shell
    print("export PATH=\"/opt/ansible-dk/bin:"+HOME+"/.ansible-dk/python/bin:"+HOME+"/.ansible-dk/gem/ruby/"+RUBY_ABI+ \
          "/bin:/opt/ansible-dk/embedded/bin:$PATH\"")
    print("export GEM_ROOT=\"/opt/ansible-dk/embedded/lib/ruby/gems/"+RUBY_ABI+"\"")
    print("export GEM_HOME=\""+HOME+"/.ansible-dk/gem/ruby/"+RUBY_ABI+"\"")
    print("export GEM_PATH=\""+HOME+"/.ansible-dk/gem/ruby/"+RUBY_ABI+ \
          ":/opt/ansible-dk/embedded/lib/ruby/gems/"+RUBY_ABI+"\"")
    print("export PYTHONUSERBASE=\""+HOME+"/.ansible-dk/python\"")
    print("export PIP_INSTALL_OPTION=\"--user\"")

###################################################
# verify command
@cli.command()
def verify():
    commands = [
        'ansible-dk --version',
        'aws --version 2>&1 | tr " " "\n" | tr "/" " "',
        'ansible --version',
        'ansible-lint --version',
        'ruby --version',
        'kitchen --version',
        'gem list ^kitchen-* | tail -n+0',
    ]
    for command in commands:
        if os.system(command) != 0:
            print "Verification of %s failed." % command.split()[0]
            sys.exit(-1)
    print "Verification succeeded."

###################################################
# generate command
@cli.group()
def generate():
    pass

@generate.command(name='playbook')
@click.option('--name', required=True, help='Name of playbook to generate')
def generate_playbook(name):
    print("Generating playbook: ", name)

@generate.command(name='role')
@click.option('--name', required=True, help='Name of role to generate')
def generate_role(name):
    print("Generating role: ", name)

###################################################
# Call main CLI
if __name__ == '__main__':
    cli()
