#!/bin/bash

# ansible-dk tool.
# The plan is for one day this to become a generic tool
# with many subcommands, likely implemented in Ruby or Python.
# The immediate need, though, is for a script that will provide
# the shell env vars.

# Usage:
# eval "$(ansible-dk shell-init bash)"

# Check CLI args.  Not uh, very flexible at the moment.
if [[ "z$1" != "zshell-init" ]]; then
    echo "Usage: ansible-dk shell-init bash" 1>&2
    exit 1
fi

if [[ "z$2" != "zbash" ]]; then
    echo "Usage: ansible-dk shell-init bash" 1>&2
    exit 2   
fi

RUBY_ABI=2.1.0
PYTHON_ABI=2.7

# Ensure the user has a .ansible-dk directory for
# private user gems
mkdir -p $HOME/.ansible-dk
mkdir -p $HOME/.ansible-dk/gem
mkdir -p $HOME/.ansible-dk/python

echo export PATH=\"/opt/ansible-dk/bin:$HOME/.ansible-dk/gem/ruby/$RUBY_ABI/bin:/opt/ansible-dk/embedded/bin:$PATH\"
echo export GEM_ROOT=\"/opt/ansible-dk/embedded/lib/ruby/gems/$RUBY_ABI\"
echo export GEM_HOME=\"$HOME/.ansible-dk/gem/ruby/$RUBY_ABI\"
echo export GEM_PATH=\"$HOME/.ansible-dk/gem/ruby/$RUBY_ABI:/opt/ansible-dk/embedded/lib/ruby/gems/$RUBY_ABI\"
echo export PYTHONUSERBASE=\"$HOME/.ansible-dk/python\"
echo export PIP_INSTALL_OPTION=\"--user\"
# echo export PYTHONPATH=
